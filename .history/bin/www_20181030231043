#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('hocplus:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);
var students = [];
var teachers = [];

io.on('connection', function(client){
  console.log('Client vs Server is connected ' + client.id);

  client.on('disconnect', function(){
    console.log(client.id + ' disconnect');
    for( var i=0, len = students.length; i<len; ++i ){
        var c = students[i];

        if(c.socketId == client.id){
            students.splice(i,1);
            break;
        }
    }
  });

  //luu thong tin hoc vien
  client.on('student', function(data){
    var student = new Object();
    student.userName = data.userName;
    student.userId = data.userId;
    student.socketId = client.id;
    students.push(student);

    for( var i=0, len = teachers.length; i<len; ++i ){
      var c = teachers[i];

      io.to(c.socketId).emit('listStudent', students);
    }

    console.log(students);
  });
  //luu thong tin giao vien
  client.on('teacher', function(data){
    var teacher = new Object();
    teacher.userName = data.userName;
    teacher.userId = data.userId;
    teacher.socketId = client.id;
    teachers.push(teacher);
    console.log(teachers);
  });
  
  
  client.on('send-all', function(data){
    io.sockets.emit('sever-send-all', data);
  });

  client.on('send-all-not-sender', function(data){
    client.broadcast.emit('server-send-add-not-sender', data);
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
